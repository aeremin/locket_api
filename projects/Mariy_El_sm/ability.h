/*$file${.::ability.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*
* Model: Ability.qm
* File:  ${.::ability.h}
*
* This code has been generated by QM 4.5.1 (https://www.state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*/
/*$endhead${.::ability.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
#ifndef ability_h
#define ability_h
#include "api/eeprom.h"
#include "mariel_sm.h"

#ifdef __cplusplus
extern "C" {
#endif
#include "qhsm.h"    /* include own framework tagunil version */

//Start of h code from diagram
#define ABILITY_THRESHOLD_S 30
#define ABILITY_PAUSE_M 15

class Variables {
public:
    static Variables Load(Eeprom* eeprom) {
        Variables result{};
        result.eeprom = eeprom;
        result.ability_pause = eeprom->Read<unsigned int>(offsetof(Variables, ability_pause));
        result.count = eeprom->Read<unsigned int>(offsetof(Variables, count));
        result.ability = eeprom->Read<unsigned int>(offsetof(Variables, ability));
        return result;
    }

    unsigned int ability_pause;
    unsigned int count;
    unsigned int ability;
    Eeprom* eeprom;
};
//End of h code from diagram


/*$declare${SMs::Ability} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*${SMs::Ability} ..........................................................*/
typedef struct {
/* protected: */
    QHsm super;

/* public: */
    Variables vars;
} Ability;

/* protected: */
QState Ability_initial(Ability * const me, QEvt const * const e);
QState Ability_global(Ability * const me, QEvt const * const e);
QState Ability_ability(Ability * const me, QEvt const * const e);
QState Ability_idle(Ability * const me, QEvt const * const e);
QState Ability_active(Ability * const me, QEvt const * const e);

#ifdef DESKTOP
QState Ability_final(Ability * const me, QEvt const * const e);
#endif /* def DESKTOP */

/*$enddecl${SMs::Ability} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/

static Ability ability; /* the only instance of the Ability class */



typedef struct abilityQEvt {
    QEvt super;
    unsigned int value;
} abilityQEvt;


extern QHsm * const the_ability; /* opaque pointer to the ability HSM */

/*$declare${SMs::Ability_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*${SMs::Ability_ctor} .....................................................*/
void Ability_ctor(RadBehavior* SMBeh, Eeprom* eeprom);
/*$enddecl${SMs::Ability_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
#ifdef __cplusplus
}
#endif
#endif /* ability_h */