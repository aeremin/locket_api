/*$file${.::health.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*
* Model: Health.qm
* File:  ${.::health.h}
*
* This code has been generated by QM 4.5.1 (https://www.state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*/
/*$endhead${.::health.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
#ifndef health_h
#define health_h

#include "mariel_sm.h"
#include "api/eeprom.h"
#include "ability.h"

#ifdef __cplusplus
extern "C" {
#endif
#include "qhsm.h"    /* include own framework tagunil version */


//Start of h code from diagram
#define SIMPLE 0
#define GOD_READY 1
#define GOD 2
#define DEAD 3
#define DEFAULT_HP 100
#define GOD_THRESHOLD_S 30
#define GOD_PAUSE_M 30
//End of h code from diagram


/*$declare${SMs::Health} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*${SMs::Health} ...........................................................*/
class Health_Variables {
public:
    static Health_Variables Load(Eeprom* eeprom) {
        Health_Variables result{};
        result.eeprom = eeprom;
        result.god_pause = eeprom->Read<unsigned int>(offsetof(Health_Variables, god_pause)
                + sizeof(Ability_Variables));
        result.count = eeprom->Read<unsigned int>(offsetof(Health_Variables, count)
                + sizeof(Ability_Variables));
        result.health = eeprom->Read<unsigned int>(offsetof(Health_Variables, health) +
                sizeof(Ability_Variables));
        return result;
    }

    void DecrementGodPause() {
        --god_pause;
        SaveGodPause();
    }

    unsigned int GetGodPause() const {
        return god_pause;
    }

    void SetHealth(unsigned int hp) {
        health = hp;
        SaveHealth();
    }

    void ResetHealth() {
        health = DEFAULT_HP;
        SaveHealth();
    }

    unsigned int GetHealth() const {
        return health;
    }

    void DecreaseHealth(unsigned int delta_hp) {
        if (delta_hp <= health) {
            health -= delta_hp;
        } else {
            health = 0;
        }
        SaveHealth();
    }

    void ReSetGodPause() {
        god_pause = GOD_PAUSE_M;
        SaveGodPause();
    }

    void ZeroGodPause() {
        god_pause = 0;
        SaveGodPause();
    }

    void IncrementCount() {
        ++count;
        // Count changes every second, only persist it occasionally to prevent
        // too frequent eeprom writes.
        if (count % 30 == 0) {
            SaveCount();
        }
    }

    void ResetCount() {
        count = 0;
        SaveCount();
    }

    unsigned int GetCount() const {
        return count;
    }

private:
    void SaveGodPause() {
        eeprom->Write(god_pause, offsetof(Health_Variables, god_pause) + sizeof(Ability_Variables));
    }
    void SaveCount() {
        eeprom->Write(count, offsetof(Health_Variables, count));
    }
    void SaveHealth() {
        eeprom->Write(health, offsetof(Health_Variables, health));
    }

    unsigned int god_pause;
    unsigned int count;
    unsigned int health;
    Eeprom* eeprom;
};




typedef struct {
/* protected: */
    QHsm super;
    RadBehavior* SMBeh;

/* public: */
    QStateHandler StartState;
    Health_Variables vars;
} Health;

/* protected: */
QState Health_initial(Health * const me, QEvt const * const e);
QState Health_global(Health * const me, QEvt const * const e);
QState Health_alive(Health * const me, QEvt const * const e);
QState Health_god(Health * const me, QEvt const * const e);
QState Health_mortal(Health * const me, QEvt const * const e);
QState Health_god_ready(Health * const me, QEvt const * const e);
QState Health_simple(Health * const me, QEvt const * const e);
QState Health_dead(Health * const me, QEvt const * const e);

#ifdef DESKTOP
QState Health_final(Health * const me, QEvt const * const e);
#endif /* def DESKTOP */

/*$enddecl${SMs::Health} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/

static Health health; /* the only instance of the Health class */



typedef struct healthQEvt {
    QEvt super;
    int damage;
} healthQEvt;


extern QHsm * const the_health; /* opaque pointer to the health HSM */

/*$declare${SMs::Health_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*${SMs::Health_ctor} ......................................................*/
void Health_ctor(RadBehavior *SMBeh, unsigned int State, Eeprom* eeprom);
/*$enddecl${SMs::Health_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
#ifdef __cplusplus
}
#endif
#endif /* health_h */